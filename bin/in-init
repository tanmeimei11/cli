#!/usr/bin/env node

'use strict'

const path = require('path')
const shell = require('shelljs')
const program = require('commander')
// const exists = require('fs').existsSync
const os = require('os')
const rm = require('rimraf').sync
const uid = require('uid')
const ora = require('ora')
const chalk = require('chalk')
const inquirer = require('inquirer')
const exec = require('../lib/exec')
const logger = require('../lib/logger')
const download = require('../lib/download')
const generate = require('../lib/generate')

/**
 * Usage.
 * Default: use git clone
 */
program
  .usage('<template-name>')
  .parse(process.argv)

/**
 * Help.
 */
program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # 请指定脚手架'))
  console.log('    $ in init vue-multipage')
  console.log()
})

/**
 * Help.
 */
if (program.args.length < 1) return program.help()

/**
 * Padding.
 */
console.log()
process.on('exit', function () {
  console.log()
})

/**
 * Settings.
 */
var template = program.args[0]
var hasSlash = template.indexOf('/') > -1
var name = path.relative('../', process.cwd())
var to = path.resolve('.')
var tmp = os.tmpdir() + '/in-template-' + uid()

// use official templates
if (!hasSlash) {
  template = 'in-template/' + template
}

/**
 * download template
 * @param  {string} template template name
 */
const downloadTemplate = function () {
  let spinner = ora(`downloading`)

  logger.log(`downloading '${template}'`)
  spinner.start()

  download(template, tmp, function (err) {
    spinner.stop()
    logger.success('脚手架下载成功')
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())

    builder()
    process.on('exit', function () {
      rm(tmp)
    })
  });
}

/**
 * run slush
 * @param  {string} name slush template name
 */
const builder = function () {
  logger.log('generator project\n')

  generate(name, tmp, to, function (err, opts) {
    if (err) logger.fatal(err)

    // Use user feedback for... whatever!!
    logger.success('Generated "%s".', name)
    installDependencies(opts['installDep'])
  })
}

const installDependencies = function (dep) {

  logger.log('install ' + dep + ' dependencies\n')

  let isYarn = shell.which('yarn')
  let command = isYarn ? 'yarn' : 'npm'

  // yarn bug
  exec(command, dep ? ['install', dep] : ['install'], {
    stdio: 'inherit',
  })
}

downloadTemplate()
