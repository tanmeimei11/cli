#!/usr/bin/env node

'use strict'
const getEtag = require('../lib/qiniuHash')
const {
    request,
    get
} = require('https')
const {
    dirname,
    basename
} = require('path')
const {
    blue,
    red
} = require('chalk')
const {
    readFileSync,
    createReadStream,
    createWriteStream,
    appendFileSync
} = require('fs')
const {
    ls,
    test,
    cat
} = require('shelljs')
const option = {
    hostname: 'tinypng.com',
    port: 443,
    path: '/web/shrink',
    method: 'POST',
    headers: {
        'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1'
    }
}
const compress = (path, name, hash) => {
    if (/.(json|gitkeep)$/.test(name)) return ''
    let relativeName = `${path}/${name}`
    let tinyPath = `${path}/tiny.json`
    if (!test('-f', tinyPath)) {
        appendFileSync(tinyPath, '{}', {
            flag: 'w'
        })
    }
    var tiny = JSON.parse(cat(tinyPath))
    if (relativeName in tiny && tiny[`${relativeName}`] === hash) {
        console.log(`CompressDone '${blue(relativeName)}'.....`)
    } else {
        console.log(`StartUpload '${blue(relativeName)}'.....`)
        createReadStream(`${path}/${name}`).pipe(request(option, (res) => {
            res.on('data', resInfo => {
                try {
                    resInfo = JSON.parse(resInfo.toString())
                    if (resInfo.error) {
                        return console.log(`CompressError '${red(relativeName)}'.....${resInfo.message}`)
                    }
                    var oldSize = (resInfo.input.size / 1024).toFixed(2)
                    var newSize = (resInfo.output.size / 1024).toFixed(2)
                    get(resInfo.output.url, imgRes => {
                        let writeS = createWriteStream(`${path}/${name}`)
                        imgRes.pipe(writeS)
                        imgRes.on('end', () => {
                            console.log(`CompressSize ${blue(`${oldSize}KB ==> ${newSize}KB -${Math.floor(((oldSize - newSize) / oldSize * 100))}% `)}`)
                            console.log(`CompressDone '${blue(relativeName)}'.....`)
                        })
                        writeS.on('close', () => {
                            let compressHash = getEtag(`${path}/${name}`)
                            let _tinyData = JSON.parse(cat(tinyPath))
                            _tinyData[`${relativeName}`] = compressHash
                            appendFileSync(tinyPath, JSON.stringify(_tinyData, null, '\t'), {
                                flag: 'w'
                            })
                        })
                    })
                } catch (error) {
                    return console.log(`CompressError '${red(relativeName)}'.....${error}`)
                }
            })
        }))
    }
}
const {
    config
} = require('../lib/checkpk')

if (!config.compress) {
    logger.fatal('缺失 qiniu 配置')
}

ls(config.compress).forEach(file => {
    compress(dirname(file), basename(file), getEtag(file))
})